Timer unit: 1e-06 s

Total time: 0.054868 s
File: /Users/ff/dev/SCZ_RHI_RBM/GRBM.py
Function: stimgen at line 405

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   405                                           @profile
   406                                           # generate a population code for tactile, visual and proprioceptive stimuli
   407                                           def stimgen(pBc,pH,neuronInfo,gains): #done
   408                                           # INPUT:
   409                                           # pBc: stimulus position in body centered coordinates
   410                                           # pH: stimulus position in body centered coordinates
   411                                           # neuronInfo: structure containing info about tuning curves, number of
   412                                           # neurons etc for various populations. It is one of the properties of an RBM
   413                                           # object
   414                                           # gains: vector with gains of the different neural populations
   415                                           
   416                                           # OUTPUT
   417                                           # Bc: population encoding stimulus in body centered coordinates
   418                                           # H: population encoding hand position
   419                                           # T: tactile population
   420                                           
   421       201        149.0      0.7      0.3      dCp=.15 #hand radius
   422       201        153.0      0.8      0.3      slope=100000 #"sharpness" of tactile RF
   423                                           
   424                                               #body centered
   425       201        179.0      0.9      0.3      g1=gains[0] # chose gain 
   426       201      14383.0     71.6     26.2      [xg,yg]=np.meshgrid(np.arange(neuronInfo[0].n[0])+1,np.arange(neuronInfo[0].n[1])+1) #grid of coordinates
   427       201       2091.0     10.4      3.8      pos=posToInd(pBc,neuronInfo[0])
   428       201       8287.0     41.2     15.1      Bc=g1*np.exp((-(pos[0]-xg)**2-(pos[1]-yg)**2)/(2*neuronInfo[0].tc**2))#.T
   429       201        498.0      2.5      0.9      Bc=Bc.flatten()
   430                                               
   431                                               #hand
   432       201        183.0      0.9      0.3      g2=gains[1] # chose gain according to Makin & Sabes 2015
   433       201      13299.0     66.2     24.2      [xg,yg]=np.meshgrid(np.arange(neuronInfo[1].n[0])+1,np.arange(neuronInfo[1].n[1])+1)
   434       201       2048.0     10.2      3.7      pos=posToInd(pH,neuronInfo[1])
   435       201       3699.0     18.4      6.7      H=g2*np.exp((-(pos[0]-xg)**2-(pos[1]-yg)**2)/(2*neuronInfo[1].tc**2))#.T
   436       201        406.0      2.0      0.7      H=H.flatten()
   437                                               
   438       201        258.0      1.3      0.5      pHc=pBc-pH #hand centered position
   439       201        172.0      0.9      0.3      g3=gains[2]
   440       201       3368.0     16.8      6.1      d=np.linalg.norm(pHc) #distance from hand
   441       201       2944.0     14.6      5.4      elambda = 1-np.exp(slope*(d-dCp))/(1+np.exp(slope*(d-dCp)))
   442       201        589.0      2.9      1.1      if np.isnan(elambda): elambda=0
   443                                                   
   444                                               #tactile population
   445       201       2025.0     10.1      3.7      T=g3*elambda*np.ones((neuronInfo[2].n,1))
   446                                               
   447       201        137.0      0.7      0.2      return Bc, H, T

