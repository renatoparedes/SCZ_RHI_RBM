Timer unit: 1e-06 s

Total time: 0.376156 s
File: /Users/ff/dev/SCZ_RHI_RBM/GRBM.py
Function: __init__ at line 29

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    29                                                   @profile
    30                                                   #constructor
    31                                                   def __init__(self,nv,nh,tv,th,names,trainparams,neuroninfo): #done
    32         1          5.0      5.0      0.0              self.V=[structtype(),structtype(),structtype()]
    33         1          1.0      1.0      0.0              self.H=[structtype(),structtype(),structtype()]
    34         1          1.0      1.0      0.0              self.W=[[structtype(),structtype(),structtype()]]
    35         1          1.0      1.0      0.0              self.NV=nv
    36         1          0.0      0.0      0.0              self.NH=nh
    37         1         16.0     16.0      0.0              self.Npv=np.size(self.NV)
    38         1          7.0      7.0      0.0              self.Nph=np.size(self.NH)
    39         1          1.0      1.0      0.0              self.Names=names
    40         1          1.0      1.0      0.0              self.TrainParams=trainparams
    41         1          0.0      0.0      0.0              self.NeuronInfo=neuroninfo
    42         1          2.0      2.0      0.0              self.WUp=[structtype(),structtype(),structtype()]
    43         1          1.0      1.0      0.0              self.WDown=[structtype(),structtype(),structtype()]
    44                                                       
    45         4          9.0      2.2      0.0              for pv in np.arange(self.Npv):
    46         3         19.0      6.3      0.0                  self.V[pv].S=np.zeros((self.NV[pv],1))
    47         3         12.0      4.0      0.0                  self.V[pv].B=np.zeros((self.NV[pv],1))
    48         3          2.0      0.7      0.0                  self.V[pv].T=tv[pv]
    49                                                       
    50         2          3.0      1.5      0.0              for ph in np.arange(self.Nph):
    51         1          2.0      2.0      0.0                  self.H[ph].S=np.zeros((self.NH[ph],1))
    52         1          8.0      8.0      0.0                  self.H[ph].B=np.zeros((self.NH[ph],1))
    53         1          0.0      0.0      0.0                  self.H[ph].T=th[ph]
    54                                                       
    55         4          7.0      1.8      0.0              for pv in np.arange(self.Npv):
    56         6         35.0      5.8      0.0                  for ph in np.arange(self.Nph):
    57         3     119143.0  39714.3     31.7                      self.W[ph][pv].W= np.random.normal(0,1,size=(self.NH[ph],self.NV[pv])) / np.sum(self.NH) #%%%%normalization has to be checked! BEWARE!
    58         2          5.0      2.5      0.0              for ph in np.arange(self.Nph):
    59         1     110890.0 110890.0     29.5                  ww=0.01*np.random.normal(0,1,size=(self.NH[ph],np.sum(self.NV)))
    60         1         80.0     80.0      0.0                  vv=np.zeros((np.sum(self.NV),1))
    61         1        125.0    125.0      0.0                  inds=np.insert(np.cumsum(self.NV),0,0)
    62         4         16.0      4.0      0.0                  for pv in np.arange(self.Npv):
    63         3         48.0     16.0      0.0                      currInds=np.arange(inds[pv],inds[pv+1])
    64         3      34610.0  11536.7      9.2                      ww[:,currInds]=self.W[ph][pv].W #%matrix acting on the subpopulation ph
    65         3         70.0     23.3      0.0                      vv[currInds]=self.V[pv].S  #%global visible activity
    66                                                               
    67         1          1.0      1.0      0.0                  self.WUp[ph].W=ww
    68         1          2.0      2.0      0.0                  self.VUp=vv
    69                                                       
    70         4         11.0      2.8      0.0              for pv in np.arange(self.Npv):
    71         3     106566.0  35522.0     28.3                  ww=0.01*np.random.normal(0,1,size=(np.sum(self.NH),self.NV[pv]))
    72         3        136.0     45.3      0.0                  hh=np.zeros((np.sum(self.NH),1))
    73         3        257.0     85.7      0.1                  inds=np.insert(np.cumsum(self.NH),0,0)
    74         6         25.0      4.2      0.0                  for ph in np.arange(self.Nph):
    75         3         31.0     10.3      0.0                      currInds=np.arange(inds[ph],inds[ph+1])
    76         3       2578.0    859.3      0.7                      ww[currInds,:]=self.W[ph][pv].W #%matrix acting on the subpopulation pv
    77         3         27.0      9.0      0.0                      hh[currInds]=self.H[ph].S    #%global hidden activity
    78                                                   
    79         3          5.0      1.7      0.0                  self.WDown[pv].W=ww
    80         3          4.0      1.3      0.0                  self.VDown=hh
    81         3         26.0      8.7      0.0                  if np.size(self.NeuronInfo[pv].n)==2:
    82         2         33.0     16.5      0.0                      self.NeuronInfo[pv].min=self.NeuronInfo[pv].center-self.NeuronInfo[pv].span/2+self.NeuronInfo[pv].sm
    83         2          8.0      4.0      0.0                      self.NeuronInfo[pv].max=self.NeuronInfo[pv].center+self.NeuronInfo[pv].span/2-self.NeuronInfo[pv].sm
    84         2        195.0     97.5      0.1                      self.NeuronInfo[pv].xAxis=np.linspace(self.NeuronInfo[pv].min[0]-self.NeuronInfo[pv].sm[0],self.NeuronInfo[pv].max[0]+self.NeuronInfo[pv].sm[0],self.NeuronInfo[pv].n[0])
    85         2        106.0     53.0      0.0                      self.NeuronInfo[pv].yAxis=np.linspace(self.NeuronInfo[pv].min[1]-self.NeuronInfo[pv].sm[1],self.NeuronInfo[pv].max[1]+self.NeuronInfo[pv].sm[1],self.NeuronInfo[pv].n[1])
    86                                               
    87         3       1025.0    341.7      0.3                  self.persistentChain=np.zeros((np.sum(self.NV),self.TrainParams.N_vects))

